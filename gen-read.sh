#!/bin/bash

cat > README.md << 'EOF'
# 🚀 Real-time Meme Coin Aggregator

A backend service that aggregates and deduplicates real-time meme coin data from multiple DEX APIs. Streams live price updates via WebSockets and supports sorting, filtering, and pagination like AxiomTrade.

---

## ⚙️ Tech Stack

- **Node.js + TypeScript**
- **Express.js** – REST API
- **Socket.IO** – Live updates
- **Redis** – Caching layer (TTL 30s)
- **Axios** – HTTP with retry + backoff
- **DexScreener** + **GeckoTerminal** APIs

---

## 📁 Project Structure

```
.
├── src/
│   ├── api/        # External API handlers (DexScreener, GeckoTerminal)
│   ├── cache/      # Redis client and caching logic
│   ├── services/   # Core logic: merge, polling, streaming
│   ├── routes/     # Express route handlers
│   ├── utils/      # Retry logic, helpers
│   └── index.ts    # Entry point
├── tests/          # Unit & integration tests
└── README.md       # Generated by this script
```

---

## 📡 API Endpoints

### `GET /api/v1/tokens`

> Fetch and merge token data from multiple sources (DexScreener, GeckoTerminal)  
> Supports filtering, sorting, and cursor-based pagination

**Query Parameters:**

| Param      | Required | Description                                        |
|------------|----------|----------------------------------------------------|
| `q`        | ✅ yes   | Token search (e.g. `bonk`)                          |
| `limit`    | ❌ no    | Max results (default: 10)                           |
| `cursor`   | ❌ no    | Token address to paginate from                     |
| `sort`     | ❌ no    | Field to sort on: `price_change`, `volume_sol`     |
| `order`    | ❌ no    | `asc` or `desc` (default: `desc`)                  |
| `interval` | ❌ no    | Time range: `1h`, `24h`, `7d` (default: `24h`)     |

---

## 🔎 Route Examples & Descriptions

| URL | Description |
|-----|-------------|
| `http://localhost:5000/api/v1/tokens?q=bonk` | Basic token search for "bonk" |
| `http://localhost:5000/api/v1/tokens?q=bonk&sort=price_change&order=desc&interval=24h` | Sorted by 24h price change descending |
| `http://localhost:5000/api/v1/tokens?q=bonk&interval=1h` | 1-hour window stats for "bonk" |
| `http://localhost:5000/api/v1/tokens?q=bonk&sort=volume_sol&order=desc` | Sort tokens by trading volume |
| `http://localhost:5000/api/v1/tokens?q=usdt&limit=3&cursor=DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263` | Paginate results with a cursor (3 tokens only) |

📦 **Example:**

```bash
curl "http://localhost:5000/api/v1/tokens?q=bonk&sort=price_change&order=desc"
```

---

## 🔌 WebSocket Streaming

**Endpoint:** `ws://localhost:5000`  
**Event:** `token_update`

Emits live updates every 30 seconds for trending tokens

```typescript
const socket = io("http://localhost:5000");
socket.on("token_update", (data) => {
  console.log("📈 Live Update:", data);
});
```

---

## 🧠 Live Polling Service

Start polling popular tokens (like Bonk, Doge, Pepe) in the background:

```bash
npm run poller
```

**Why?**
- Keeps the data hot in cache and emits live updates to connected clients via WebSocket.

---

## ⚠️ GeckoTerminal 404 Error

You might see:

```
GeckoTerminal fetch failed: Request failed with status code 404
```

🔍 **Cause:**
- Token not indexed by GeckoTerminal yet (e.g. new meme coins)
- Invalid or unrecognized address

✅ **Handled:**
- Gracefully falls back to DexScreener data
- Does not block overall result

---

## 🧪 Testing

```bash
npm run test
```

✅ **Covers:**
- REST routes (200, 400, 500 cases)
- Redis cache hits/misses
- Token merge logic (Dex + Gecko)
- WebSocket emit checks

---

## 🚀 Setup

```bash
git clone https://github.com/your-username/meme-aggregator.git
cd meme-aggregator
npm install
```

---

## 🌐 Environment

`.env` file:

```ini
PORT=5000
REDIS_URL=redis://localhost:6379
```

---

## 🧬 Run the Server

```bash
npm run dev     # Starts the API + WebSocket
npm run poller  # Starts live polling updates
```

---

## 🎯 Deliverables

- ✅ REST API with filter, sort, cursor pagination
- ✅ Real-time WebSocket token updates
- ✅ Redis caching with TTL
- ✅ Rate-limit handling with retry/backoff
- ⬜ Postman Collection
- ⬜ 10+ Tests
- ⬜ Demo Video

---

## 📸 Screenshots (to be added manually)

- ✅ REST API output (Postman)
- ✅ WebSocket console update
- ✅ Redis TTL proof via CLI (TTL key)
EOF

echo "✅ README.md generated successfully!"
echo "📄 File location: $(pwd)/README.md"
